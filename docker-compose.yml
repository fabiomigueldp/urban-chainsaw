version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trading-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=trading_signals
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d trading_signals"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - trading-network

  trading-signal-processor:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: trading-signal-processor
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    
    # Run with maximum privileges
    privileged: true
    user: root
    
    # Environment variables for production
    environment:
      - DEST_WEBHOOK_URL=${DEST_WEBHOOK_URL}
      - FINVIZ_UPDATE_TOKEN=${FINVIZ_UPDATE_TOKEN}
      - SERVER_PORT=80
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TOP_N=${TOP_N:-15}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-16}
      - FORWARDING_WORKERS=${FORWARDING_WORKERS:-5}
      - FINVIZ_REFRESH_SEC=${FINVIZ_REFRESH_SEC:-3}
      - FINVIZ_USE_ELITE=${FINVIZ_USE_ELITE:-false}
      - FINVIZ_EMAIL=${FINVIZ_EMAIL:-}
      - FINVIZ_PASSWORD=${FINVIZ_PASSWORD:-}
      - DEST_WEBHOOK_MAX_REQ_PER_MIN=${DEST_WEBHOOK_MAX_REQ_PER_MIN:-60}
      - DEST_WEBHOOK_RATE_LIMITING_ENABLED=${DEST_WEBHOOK_RATE_LIMITING_ENABLED:-true}
      - DEST_WEBHOOK_TIMEOUT=${DEST_WEBHOOK_TIMEOUT:-5}
      - MAP_SIDE_TO_ACTION_TRADERSPOST=${MAP_SIDE_TO_ACTION_TRADERSPOST:-true}
      # Database configuration
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/trading_signals
      - DATABASE_ECHO=${DATABASE_ECHO:-false}
      - DATABASE_POOL_SIZE=${DATABASE_POOL_SIZE:-20}
      - DATABASE_MAX_OVERFLOW=${DATABASE_MAX_OVERFLOW:-30}
      - DUAL_WRITE_ENABLED=${DUAL_WRITE_ENABLED:-false}
      - DATABASE_ONLY_MODE=${DATABASE_ONLY_MODE:-true}
      - SIGNAL_RETENTION_DAYS=${SIGNAL_RETENTION_DAYS:-30}
    
    # Ports
    ports:
      - "80:80"
      - "8008:8008"  # Prometheus metrics (optional)
    
    # Volumes for persistent data
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./finviz_config.json:/app/finviz_config.json
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    networks:
      - trading-network
    
    # Resource limits optimized for async workload
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '1.0'
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Optional: Prometheus for monitoring
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'

# Named volumes for persistence
volumes:
  postgres_data:
    driver: local

networks:
  trading-network:
    driver: bridge
